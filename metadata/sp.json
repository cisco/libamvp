{
    "catalogVersion": "1.0",
    "vendorName": "Cisco",
    "version": "1.0",
    "moduleName": "Cisco Example AMVP Cryptographic Module",
    "docVersion": "1.0",
    "lastUpdated": "4/10/25",
    "securityPolicy": {
        "general": {
            "overallDescription": "This module represents a basic small software module. It is for example use only and does not intentionally represent any existing or future module.",
            "securityLevels": {
                "overall": 1,
                "section1": 1,
                "section2": 1,
                "section3": 1,
                "section4": 1,
                "section5": 1,
                "section6": 1,
                "section7": 1,
                "section8": 1,
                "section9": 1,
                "section10": 1,
                "section11": 1,
                "section12": 1
            }
        },
        "cryptographicModuleSpecification": {
            "description": {
                "purposeAndUse": "This cryptographic module provides basic encryption algorithms to be used across a variety of products and use cases.",
                "referenceToSubchip": "MultiChipStandalone",
                "cryptographicBoundary": "The cryptographic boundary of the module is module.so, a dynamically loadable library. The module performs no communication other than with the calling application via APIs that invoke the module.",
                "TOEPP": "The module’s TOEPP is the physical perimeter of the tested platforms listed in Table “Tested Operational Environments - Software, Firmware, Hybrid” below. The components of the TOEPP include: Hardware components. The module’s block diagram is shown below."
            },
            "blockDiagram": "INSERT BLOCK DIAGRAM IMAGE HERE",
            "testedSoftwareFirmwareHybrid": [
                {
                    "packagesFilenames": "module.so",
                    "softwareFirmwareVersion": "1.0",
                    "nonSecurityRelevantDistinguishingFeatures": "non",
                    "integrityTestImplemented": "HMAC-SHA2-256"
                }
            ],
            "excludedComponents": "None",
            "degradedMode": "The module does not support a degraded mode of operation.",
            "modeChangeInstructionsAndStatus": "When a non-approved service is invoked while in approved mode of operation, the module implicitly transitions to a non-approved mode. Similarly, when a call to an approved service is made while in non-approved mode of operation, the module transitions to approved mode of operation.",
            "algorithms": [
                {
                    "algorithmName": "AES-CBC",
                    "cavpCertNumbers": "A01234",
                    "algorithmCapabilities": "Decrypt,Encrypt. Key Length: 128, 192, 256",
                    "oe": "Intel Xeon E-2234 (Coffee Lake)",
                    "reference": "SP 800-38A"
                },
                {
                    "algorithmName": "HMAC-SHA2-256",
                    "cavpCertNumbers": "A01234",
                    "algorithmCapabilities": "MAC: 32-256 Increment 8. Key Length: 256-448 Increment 8",
                    "oe": "Intel Xeon E-2234 (Coffee Lake)",
                    "reference": "FIPS 198-1"
                 }
            ],
            "algorithmSpecificInformation": "No algorithms, other than those which are listed in the algorithms table, are supported by the module in any mode of operation.",
            "rbgAndEntropy": {
                "entropyInfo": "This module depends on a non-physical entropy source.",
                "rngInfo": "The source is able to generate sufficient entropy to support the module’s cryptographic operations.",
                "entropySources": [
                    {
                        "esvCertNumber": "E01234",
                        "operationalEnvironment": "string"
                    }
                ]
            }
        },
        "cryptographicModuleInterfaces": {
            "portsAndInterfaces": {
                "text": "The logical interface is a C-language application program interface (API). The Data Input interface consists of the input parameters of the API functions. The Data Output interface consists of the output parameters of the API functions. The Control Input interface consists of the actual API functions. The Status Output interface includes the return values of the API functions.",
                "portInterfaces": [
                    {
                        "port": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Data Input",
                        "data": "API input parameters for data."
                    },
                    {
                        "port": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Data Output",
                        "data": "API output parameters for data."
                    },
                    {
                        "port": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Control Output",
                        "data": "API function calls."
                    },
                    {
                        "port": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Status Output",
                        "data": "API return codes, error message."
                    }
                ]
            },
            "trustChannelSpec": "The module does not support trusted channel.",
            "controlInterfaceNotInhibited": "Please note that the module does not support a control output interface and is not applicable for this module",
            "additionalInformation": "N/A"
        },
        "rolesServicesAuthentication": {
            "authenticationMethods": {
                "authenticationMethodsList": [
                    {
                        "name": "N/A for this module",
                        "description": "N/A",
                        "mechanism": "N/A",
                        "strengthPerAttempt": "N/A",
                        "strengthPerMinute": "N/A"
                    }
                ],
                "text": "The module does not support authentication. The module does not support concurrent operators."
            },
            "roles": [
                {
                    "name": "Crypto Officer",
                    "type": "Role",
                    "operatorType": "CO",
                    "authenticationMethods": "N/A (Implicitly assumed)"
                }
            ],
            "approvedServices": {
                "approvedServicesList": [
                    {
                        "name": "Symmetric Encryption",
                        "description": "Encryption",
                        "indicator": "Return value 1 from the API call",
                        "inputs": "Plaintext, key",
                        "outputs": "Ciphertext",
                        "sfi": "AES CBC listed in the Approved Algorithms Table",
                        "roles": "CO",
                        "sspAccess": "W, E"
                    },
                    {
                        "name": "Decryption",
                        "description": "Decryption",
                        "indicator": "Return value 1 from the API call",
                        "inputs": "Ciphertext, key",
                        "outputs": "Plaintext",
                        "sfi": "AES CBC listed in the Approved Algorithms Table",
                        "roles": "CO",
                        "sspAccess": "W, E"
                    }
                ],
                "text": "For the above table, the convention below applies when specifying the access permissions (types) that the service has for each SSP.\n\bG = Generate: The module generates or derives the SSP.\n\bR = Read: The SSP is read from the module (e.g., the SSP is output).\n\bW = Write: The SSP is updated, imported, or written to the module.\n\bE = Execute: The module uses the SSP in performing a cryptographic operation.\n\bZ = Zeroize: The module zeroizes the SSP.\nFor the role, CO indicates “Crypto Officer”.\nThe module implements a service indicator that indicates whether the invoked service is approved. The service indicator is a return value 1 from a given API."
            },
            "nonApprovedServices": [
                {
                    "name": "Encryption",
                    "description": "Encryption",
                    "algorithmsAccessed": "DES, Triple-DES listed in the Non-Approved Algorithms Table",
                    "role": "CO"
                },
                {
                    "name": "Decryption",
                    "description": "Decryption",
                    "algorithmsAccessed": "DES, Triple-DES listed in the Non-Approved Algorithms Table",
                    "role": "CO"
                }
            ],
            "externalSoftwareFirmwareLoaded": "The module does not support loading of external software or firmware."
        },
        "softwareFirmwareSecurity": {
            "integrityTechniques": "The module runs a HMAC SHA2-256 integrity verification at application startup. The module also runs the self-test for HMAC SHA2-256 prior to running the integrity check.",
            "initiateOnDemand": "The operator can initiate on-demand integrity test by calling a given API or rebooting the host platform.",
            "openSourceParameters": "None",
            "additionalInformation": "None"
        },
        "operationalEnvironment": {},
        "physicalSecurity": {},
        "noninvasiveSecurity": {},
        "sensitiveSecurityParameterManagement": {
            "storageAreas": {
                "storageAreaList": [
                    {
                        "name": "RAM",
                        "description": "Temporary Internal Storage",
                        "persistenceType": "Dynamic"
                    }
                ],
                "text": "The module does not store any CSPs persistently. The application is responsible for managing CSPs."
            },
            "inputOutputMethods": {
                "sspInputOutputList": [
                    {
                        "name": "AP Input",
                        "from": "Calling Process",
                        "to": "API Input Parameters",
                        "formatType": "Plaintext",
                        "distributionType": "Manual",
                        "entryType": "Electronic",
                        "SFIOrAlgorithm": ""
                    },
                    {
                        "name": "API Output",
                        "from": "API Output Parameters",
                        "to": "Calling Process",
                        "formatType": "Plaintext",
                        "distributionType": "Manual",
                        "entryType": "Electronic",
                        "SFIOrAlgorithm": ""
                    }
                ],
                "text": "All CSPs enter the module’s boundary as API parameters."
            },
            "sspZeroizationMethods": {
                "sspZeroizationList": [
                    {
                        "method": "SSP_Delete_All()",
                        "description": "Deletes all keys and SSPs",
                        "rationale": "All keys and SSPs will no longer be accessible through API calls",
                        "operatorInitiationCapability": "Allowed"
                    },
                    {
                        "method": "Power Cycle",
                        "description": "Power Cycle zeroizes all stored SSPs",
                        "rationale": "Operating System zeroizes all the stored SSPs",
                        "operatorInitiationCapability": "Allowed"
                    }
                ],
                "text": "Power cycling or calling the given API (with a successful return value) will delete all relevant information."
            },
            "ssps": {
                "sspList": [
                    {
                        "name": "HMAC Key",
                        "description": "Used for MAC generation and verification",
                        "size": "128 to 524288 bits - greater than 128 bits",
                        "strength": "-",
                        "type": "Keyed Hash - SSP",
                        "generatedBy": "Random Number Generation",
                        "establishedBy": "-",
                        "usedBy": "Keyed Hash (HMAC/KMAC/CMAC)",
                        "inputOutput": "API Input API Output",
                        "storage": "RAM: Plaintext",
                        "temporaryStorageDuration": "Until zeroized by reboot or API call",
                        "zeroization": "SSP_Delete_All() or Power Cycle",
                        "category": "-",
                        "relatedSSPs": "-"
                    }
                ],
                "text": ""
            },
            "transitions": "N/A",
            "additionalInformation": "N/A"
        },
        "selfTests": {
            "preOperationalSelfTests": {
              "preOperationalSelfTestList": [
                {
                  "algorithm": "HMAC-SHA2-256",
                  "implementation": "",
                  "testProperties": "256 Bits",
                  "testMethod": "Firmware Integrity Test",
                  "type": "SW/FW Integrity",
                  "indicator": "Return value of 1 on success",
                  "details": "Device power on, self-test run, self-test pass, device proceed to boot. Device power on, self-test run, self-test fail, device no boot. "
                }
              ],
              "text": "The module performs an HMAC self test in all required states."
            },
            "conditionalSelfTests": {
              "conditionalSelfTestList": [
                {
                  "algorithm": "AES-CBC",
                  "implementation": "",
                  "testProperties": "128 Bits",
                  "testMethod": "KAT",
                  "type": "CAST",
                  "indicator": "Return value of 1 on success",
                  "details": "Encrypt/Decrypt KAT",
                  "condition": "Test runs on power up at boot."
                }
              ],
              "text": ""
            },
            "preOperationalPeriodicSelfTests": {
              "preOperationalPeriodicSelfTestList": [
                {
                  "algorithm": "HMAC-SHA2-256",
                  "implementation": "",
                  "testProperties": "256 Bits",
                  "testMethod": "Firmware Integrity Test",
                  "type": "SW/FW Integrity",
                  "indicator": "Return value of 1 on success",
                  "details": "",
                  "period": "On reboot or API call",
                  "periodicMethod": "Manual or reboot"
                }
              ],
              "text": ""
            },
            "conditionalPeriodicSelfTests": {
              "conditionalPeriodicSelfTestList": [
                {
                  "algorithm": "HMAC-SHA2-256",
                  "implementation": "",
                  "testProperties": "256 Bits",
                  "testMethod": "Firmware Integrity Test",
                  "type": "SW/FW Integrity",
                  "indicator": "Return value of 1 on success",
                  "details": "",
                  "period": "On reboot or API call",
                  "periodicMethod": "Manual or reboot"
                }
              ],
              "text": ""
            }
          },
        "lifeCycleAssurance": {
            "installationInitializationAndStartupProcedures": "The module is only distributed to select and qualified personnel and is distributed with in-depth documentation. The module runs all relevant integrity and self tests at startup, and prevents usage if they fail.",
            "administratorGuidance": "An additional guidance document, if required, can be obtained by contacting the company using the information posted on the validation certificate.",
            "nonAdministratorGuidance": "N/A to this module.",
            "designAndRules": "Caller shall ensure all required algorithm properties are enabled.",
            "maintenanceRequirements": "Not applicable to this module",
            "endOfLife": "",
            "additionalInformation": ""
        },
        "mitigationOfOtherAttacks": {
            "attacks": "The module has random timing variations integrated to prevent timing attacks.",
            "mitigationEffectiveness": "High",
            "guidanceAndConstraints": "No user setup needed.",
            "additionalInformation": "Any user of this module should ensure the operating device is secure from other physical attacks."
        }
    }
}
